// <auto-generated />
using System;
using DagAir.QueryNode.Data.AppContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DagAir.QueryNode.Data.Migrations.Migrations
{
    [DbContext(typeof(DagAirAppContext))]
    [Migration("20211008093202_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("DagAir")
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.10");

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Address", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("CityId")
                        .HasColumnType("bigint")
                        .HasColumnName("city_id");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<long>("PostalCodeId")
                        .HasColumnType("bigint")
                        .HasColumnName("postal_code_id");

                    b.HasKey("Id")
                        .HasName("pk_addresses");

                    b.HasIndex("CityId")
                        .HasDatabaseName("ix_addresses_city_id");

                    b.HasIndex("CountryId")
                        .HasDatabaseName("ix_addresses_country_id");

                    b.HasIndex("PostalCodeId")
                        .HasDatabaseName("ix_addresses_postal_code_id");

                    b.ToTable("addresses");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Affiliate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id");

                    b.HasKey("Id")
                        .HasName("pk_affiliates");

                    b.HasIndex("OrganizationId")
                        .HasDatabaseName("ix_affiliates_organization_id");

                    b.ToTable("affiliates");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_cities");

                    b.ToTable("cities");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_countries");

                    b.ToTable("countries");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_organizations");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasDatabaseName("ix_organizations_address_id");

                    b.ToTable("organizations");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.PostalCode", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_postal_codes");

                    b.ToTable("postal_codes");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Producer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AddressId")
                        .HasColumnType("bigint")
                        .HasColumnName("address_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime>("DateOfEstablishment")
                        .HasColumnType("datetime")
                        .HasColumnName("date_of_establishment");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_producers");

                    b.HasIndex("AddressId")
                        .IsUnique()
                        .HasDatabaseName("ix_producers_address_id");

                    b.ToTable("producers");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AffiliateId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<int>("Floor")
                        .HasColumnType("int")
                        .HasColumnName("floor");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number");

                    b.HasKey("Id")
                        .HasName("pk_rooms");

                    b.HasIndex("AffiliateId")
                        .HasDatabaseName("ix_rooms_affiliate_id");

                    b.ToTable("rooms");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Sensor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<long>("AffiliateId")
                        .HasColumnType("bigint")
                        .HasColumnName("affiliate_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime>("LastDataSentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("last_data_sent_date");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint")
                        .HasColumnName("room_id");

                    b.Property<long>("SensorModelId")
                        .HasColumnType("bigint")
                        .HasColumnName("sensor_model_id");

                    b.HasKey("Id")
                        .HasName("pk_sensors");

                    b.HasIndex("AffiliateId")
                        .HasDatabaseName("ix_sensors_affiliate_id");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("ix_sensors_room_id");

                    b.HasIndex("SensorModelId")
                        .HasDatabaseName("ix_sensors_sensor_model_id");

                    b.ToTable("sensors");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.SensorModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(CURRENT_DATE)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime")
                        .HasColumnName("modified");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)")
                        .HasColumnName("name");

                    b.Property<long>("ProducerId")
                        .HasColumnType("bigint")
                        .HasColumnName("producer_id");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("version");

                    b.HasKey("Id")
                        .HasName("pk_sensor_models");

                    b.HasIndex("ProducerId")
                        .HasDatabaseName("ix_sensor_models_producer_id");

                    b.ToTable("sensor_models");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Address", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.City", "City")
                        .WithMany("Addresses")
                        .HasForeignKey("CityId")
                        .HasConstraintName("fk_addresses_cities_city_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Country", "Country")
                        .WithMany("Addresses")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("fk_addresses_countries_country_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.PostalCode", "PostalCode")
                        .WithMany("Addresses")
                        .HasForeignKey("PostalCodeId")
                        .HasConstraintName("fk_addresses_postal_codes_postal_code_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Country");

                    b.Navigation("PostalCode");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Affiliate", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Organization", "Organization")
                        .WithMany("Affiliates")
                        .HasForeignKey("OrganizationId")
                        .HasConstraintName("fk_affiliates_organizations_organization_id");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Organization", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Address", "Address")
                        .WithOne("Organization")
                        .HasForeignKey("DagAir.QueryNode.Data.AppEntitities.Organization", "AddressId")
                        .HasConstraintName("fk_organizations_addresses_address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Producer", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Address", "Address")
                        .WithOne("Producer")
                        .HasForeignKey("DagAir.QueryNode.Data.AppEntitities.Producer", "AddressId")
                        .HasConstraintName("fk_producers_addresses_address_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Room", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Affiliate", "Affiliate")
                        .WithMany("Rooms")
                        .HasForeignKey("AffiliateId")
                        .HasConstraintName("fk_rooms_affiliates_affiliate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Sensor", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Affiliate", "Affiliate")
                        .WithMany("Sensors")
                        .HasForeignKey("AffiliateId")
                        .HasConstraintName("fk_sensors_affiliates_affiliate_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Room", "Room")
                        .WithMany("Sensors")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("fk_sensors_rooms_room_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.SensorModel", "SensorModel")
                        .WithMany("Sensors")
                        .HasForeignKey("SensorModelId")
                        .HasConstraintName("fk_sensors_sensor_models_sensor_model_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Affiliate");

                    b.Navigation("Room");

                    b.Navigation("SensorModel");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.SensorModel", b =>
                {
                    b.HasOne("DagAir.QueryNode.Data.AppEntitities.Producer", "Producer")
                        .WithMany("SensorModels")
                        .HasForeignKey("ProducerId")
                        .HasConstraintName("fk_sensor_models_producers_producer_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Address", b =>
                {
                    b.Navigation("Organization");

                    b.Navigation("Producer");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Affiliate", b =>
                {
                    b.Navigation("Rooms");

                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Country", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Organization", b =>
                {
                    b.Navigation("Affiliates");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.PostalCode", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Producer", b =>
                {
                    b.Navigation("SensorModels");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.Room", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("DagAir.QueryNode.Data.AppEntitities.SensorModel", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
