apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-admin-app
  labels:
    app: web-admin-app
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web-admin-app
  template:
    metadata:
      labels:
        app: web-admin-app
        tier: backend
    spec:
      containers:
      - name: web-admin-app
        image: web-admin-app:1.5
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Kubernetes"
        - name: ASPNETCORE_URLS
          value: "http://+"
        - name: serviceUrls__DagAir.AdminNode
          value: "http://admin-node:8088/"
        - name: environment
          value: "kubernetes"
        - name: basePath
          value: "/webadminapp"
        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: web-admin-app
  labels:
    app: web-admin-app
    tier: backend
spec:
  selector:
    app: web-admin-app
  type: LoadBalancer
  ports:
  - port: 8085
    targetPort: 80
    protocol: TCP
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: addresses-api
  labels:
    app: addresses-api
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: addresses-api
  template:
    metadata:
      labels:
        app: addresses-api
        tier: backend
    spec:
      containers:
      - name: addresses-api
        image: addresses-api:1.5
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Kubernetes"
        - name: ASPNETCORE_URLS
          value: "http://+"
        - name: ConnectionKeys__DagAir.Addresses
          value: "Rolka7Sushi"
        - name: basePath
          value: "/addresses"
        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: addresses-api
  labels:
    app: addresses-api
    tier: backend
spec:
  selector:
    app: addresses-api
  type: LoadBalancer
  ports:
  - port: 8094
    targetPort: 80
    protocol: TCP
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: facilities-api
  labels:
    app: facilities-api
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: facilities-api
  template:
    metadata:
      labels:
        app: facilities-api
        tier: backend
    spec:
      containers:
      - name: facilities-api
        image: facilities-api:1.5
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Kubernetes"
        - name: ConnectionKeys__DagAir.Facilities
          value: "Rolka7Sushi"
        - name: basePath
          value: "/addresses"
        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: facilities-api
  labels:
    app: facilities-api
    tier: backend
spec:
  selector:
    app: facilities-api
  type: LoadBalancer
  ports:
  - port: 8087
    targetPort: 80
    protocol: TCP
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: admin-node
  labels:
    app: admin-node
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: admin-node
  template:
    metadata:
      labels:
        app: admin-node
        tier: backend
    spec:
      containers:
      - name: admin-node
        image: admin-node:1.5
        env:
        - name: ASPNETCORE_ENVIRONMENT
          value: "Kubernetes"
        - name: serviceUrls__webAdminApp
          value: "http://web-admin-app:8085/"
        - name: serviceUrls__DagAir.Facilities
          value: "http://facilities-api:8087/"
        - name: serviceUrls__DagAir.Addresses
          value: "http://addresses-api:8094/"
        - name: rabbitMq__hostName
          value: "hello-world"
        - name: rabbitMq__virtualHost
          value: "/"
        - name: rabbitMq__userName
          value: "default_user_z1L5p85AN0xB0_64y61"
        - name: rabbitMq__password
          value: "wjJR8DDXEb-FGqSOD_5pS1XBAAoWv4Yy"
        - name: rabbitMq__protocol
          value: "rabbitmq://"
        - name: rabbitMq__connectionName
          value: "admin-node"
        imagePullPolicy: Never
        ports:
        - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: admin-node
  labels:
    app: admin-node
    tier: backend
spec:
  selector:
    app: admin-node
  type: LoadBalancer
  ports:
  - port: 8088
    targetPort: 80
    protocol: TCP
    name: http
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notification-producer
  labels:
    app: notification-producer
spec:
  selector:
    matchLabels:
      app: notification-producer
  replicas: 1
  template:
    metadata:
      labels:
        app: notification-producer
    spec:
      containers:
      - name: notification-producer-container
        imagePullPolicy: Never
        image: realtime/notification-producer:1.5
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-master
  labels:
    app: redis
spec:
  selector:
    matchLabels:
      app: redis
      role: master
  replicas: 1
  template:
    metadata:
      labels:
        app: redis
        role: master
    spec:
      containers:
      - name: master
        image: redis:1.5
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
        ports:
        - containerPort: 6379
---
apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    # the port that this service should serve on
  - port: 6379
  selector:
    app: redis
    role: master
---
kind: Service
apiVersion: v1
metadata:
  name: mysql-service
  namespace: default
spec:
  type: ExternalName
  # https://docs.docker.com/docker-for-mac/networking/#use-cases-and-workarounds
  externalName: host.docker.internal
  ports:
    - name: port
      port: 3306