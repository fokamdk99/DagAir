version: "3.9"

services:
  influxdb:
    image: influxdb:2.0.8
    container_name: influxdb1
    volumes:
      - local_influxdb1:/var/lib/influxdb2
      - local_influxdb2:/etc/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=${INFLUXDB_USERNAME}
      - DOCKER_INFLUXDB_INIT_PASSWORD=${INFLUXDB_PASSWORD}
      - DOCKER_INFLUXDB_INIT_ORG=${INFLUXDB_ORG}
      - DOCKER_INFLUXDB_INIT_BUCKET=${INFLUXDB_BUCKET}
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=${INFLUXDB_TOKEN}
    ports:
      - '8086:8086'
    networks:
      - dagair_network

  rabbitmq:
    build:
      target: final
      context: ./
      dockerfile: ./Dockerfile.RabbitMq
    container_name: 'rabbitmq'
    ports:
      - 1883:1883
      - 5672:5672
      - 15672:15672
    networks:
      - dagair_network

  sensors_api:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_Sensors/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionKeys__DagAir.Sensors=${SENSORS_CONNECTIONKEYS}
    ports:
      - "8080:80"
    networks:
      - dagair_network
    restart: always
  
  policies_api:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_Policies/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionKeys__DagAir.Policies=${POLICIES_CONNECTIONKEYS}
    ports:
      - "8081:80"
    networks:
      - dagair_network
    restart: always

  facilities_api:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_Facilities/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ConnectionKeys__DagAir.Facilities=${FACILITIES_CONNECTIONKEYS}
    ports:
      - "8087:80"
    networks:
      - dagair_network
    restart: always

  ingestion_node:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_IngestionNode/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "8082:80"
    depends_on:
      - rabbitmq
    networks:
      - dagair_network
    restart: always

  policy_node:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_PolicyNode/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "8083:80"
    depends_on:
      - rabbitmq
    networks:
      - dagair_network
    restart: always

  client_node:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_ClientNode/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "8084:80"
    depends_on:
      - rabbitmq
    networks:
      - dagair_network
    restart: always

  admin_node:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_AdminNode/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    ports:
      - "8088:80"
    depends_on:
      - rabbitmq
    networks:
      - dagair_network
    restart: always

  web_client_app:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_WebApplications/Dockerfile.WebClientApp
    ports:
      - "8089:443"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
    networks:
      - dagair_network
    restart: always

  web_admin_app:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir_WebApplications/Dockerfile.WebAdminApp
    ports:
      - "8085:443"
      - "8091:80"
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=https://+;http://+
      - ASPNETCORE_HTTPS_PORT=8085
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${WEB_ADMIN_APP_CERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/${WEB_ADMIN_APP_CERTIFICATE_NAME}
    volumes:
      - ${APPDATA}/microsoft/UserSecrets/:/root/.microsoft/usersecrets
      - ./src/DagAir_WebApplications/DagAir.WebAdminApp/certs:/https/
      - type: bind # Using a bind volume as only this single file from `certs` directory should end up in the container.
        source: ./certs/${ROOT_CERTIFICATE_NAME}
        target: /https-root/${ROOT_CERTIFICATE_NAME}
    networks:
      - dagair_network
    restart: always

  identity_server:
    build:
      target: final
      context: ./src
      dockerfile: ./DagAir.IdentityServer/Dockerfile
    ports:
      - 5001:443
    environment:
      - ASPNETCORE_ENVIRONMENT=Docker
      - ASPNETCORE_URLS=https://+;
      - ASPNETCORE_HTTPS_PORT=443
      - ASPNETCORE_Kestrel__Certificates__Default__Password=${IDENTITY_SERVER_CERTIFICATE_PASSWORD}
      - ASPNETCORE_Kestrel__Certificates__Default__Path=/https/${IDENTITY_SERVER_CERTIFICATE_NAME}
    volumes:
      - ${APPDATA}/microsoft/UserSecrets/:/root/.microsoft/usersecrets
      - ./src/DagAir.IdentityServer/certs:/https/
      - type: bind # Using a bind volume as only this single file from `certs` directory should end up in the container.
        source: ./certs/${ROOT_CERTIFICATE_NAME}
        target: /https-root/${ROOT_CERTIFICATE_NAME}
    networks:
      - dagair_network
    restart: always

volumes:
  local_influxdb1:
  local_influxdb2:

networks:
  dagair_network: